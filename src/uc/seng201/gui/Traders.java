package uc.seng201.gui;

import uc.seng201.environment.GameEnvironment;
import uc.seng201.environment.GameState;
import uc.seng201.items.SpaceItem;
import uc.seng201.utils.observerable.Event;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * The user can trade to buy items with money.
 */
public class Traders extends JDialog {

    /**
     * Root panel.
     */
    private JPanel contentPane;
    /**
     * Buy button.
     */
    private JButton buyButton;
    /**
     * Leave button.
     */
    private JButton leaveButton;
    /**
     * List of items available to buy.
     */
    private JList<ItemModelEntry> availableItemsList;
    /**
     * Display the current balance of the spaceship.
     */
    private JLabel balanceLabel;
    /**
     * The model backing the list of items.
     */
    private DefaultListModel<ItemModelEntry> availableItems;
    /**
     * The current game state.
     */
    private GameState gameState;

    /**
     * Provides access to the traders so the user can buy items with
     * the money they have collected.
     *
     * @param gameState the current game state.
     */
    public Traders(GameState gameState) {
        this.gameState = gameState;

        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buyButton);

        this.availableItems = new DefaultListModel<>();
        this.availableItemsList.setModel(this.availableItems);

        this.availableItemsList.addListSelectionListener(e -> onBuyMenuSelection());
        repaintWindow();

        buyButton.addActionListener(e -> onBuy());
        leaveButton.addActionListener(e -> onLeave());

        // call onLeave() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onLeave();
            }
        });

        // call onLeave() on ESCAPE
        contentPane.registerKeyboardAction(e -> onLeave(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    /**
     * Updates the window to reflect any changes that have occurred as a result
     * of buying items from the trader.
     */
    private void repaintWindow() {
        balanceLabel.setText(String.format("$%s", gameState.getSpaceShip().getBalance()));
        int currentlySelected = availableItemsList.getSelectedIndex();
        availableItems.clear();
        gameState.getTrader().getAvailableItems().forEach((item, quantity) -> availableItems.addElement
                (new ItemModelEntry(item, quantity)));

        if (currentlySelected == -1 || currentlySelected >= availableItems.size()) {
            availableItemsList.setSelectedIndex(0);
        } else {
            availableItemsList.setSelectedIndex(currentlySelected);
        }
        contentPane.repaint();
    }

    /**
     * When the user selects the item, sets the buy buttons text to
     * the price of the ite. The balance of the space ship is checked
     * to verify if there is enough to buy the item. If so the button
     * is enabled.
     */
    private void onBuyMenuSelection() {
        if (availableItemsList.getSelectedIndex() >= 0) {
            buyButton.setEnabled(false);
            SpaceItem item = availableItemsList.getSelectedValue().spaceItem;
            buyButton.setText("Buy: $" + item.getPrice());
            buyButton.repaint();
            if (item.getPrice() <= gameState.getSpaceShip().getBalance()) {
                buyButton.setEnabled(true);
            }
        }
    }

    /**
     * When the buy button is clicked. The event manager is notified so the correct
     * handlers can be called for the event.
     */
    private void onBuy() {
        ItemModelEntry itemModelEntry = availableItemsList.getSelectedValue();
        if (itemModelEntry.quantity > 0) {
            GameEnvironment.EVENT_MANAGER.notifyObservers(Event.BUY_FROM_TRADERS, itemModelEntry.spaceItem);
        }
        if (availableItems.size() == 0) {
            buyButton.setEnabled(false);
        }
        repaintWindow();
    }

    /**
     * Allows the user to leave the space traders.
     */
    private void onLeave() {
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 20, 0);
        contentPane.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        leaveButton = new JButton();
        leaveButton.setText("Leave");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel2.add(leaveButton, gbc);
        buyButton = new JButton();
        buyButton.setEnabled(false);
        buyButton.setText("Buy");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 5);
        panel2.add(buyButton, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(20, 20, 0, 20);
        contentPane.add(panel3, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 10.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(panel4, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("Space Traders");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 4;
        gbc.insets = new Insets(0, 0, 10, 0);
        panel4.add(label1, gbc);
        final JSeparator separator1 = new JSeparator();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 4;
        gbc.weightx = 10.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel4.add(separator1, gbc);
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, -1, 16, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setHorizontalAlignment(0);
        label2.setText("Balance:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 10.0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 5);
        panel4.add(label2, gbc);
        balanceLabel = new JLabel();
        Font balanceLabelFont = this.$$$getFont$$$(null, -1, 16, balanceLabel.getFont());
        if (balanceLabelFont != null) balanceLabel.setFont(balanceLabelFont);
        balanceLabel.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel4.add(balanceLabel, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.weightx = 10.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel4.add(spacer1, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 10.0;
        gbc.weighty = 10.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.ipadx = 10;
        gbc.ipady = 10;
        panel3.add(panel5, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 10.0;
        gbc.weighty = 10.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel5.add(scrollPane1, gbc);
        availableItemsList = new JList();
        Font availableItemsListFont = this.$$$getFont$$$(null, -1, 14, availableItemsList.getFont());
        if (availableItemsListFont != null) availableItemsList.setFont(availableItemsListFont);
        availableItemsList.setSelectionMode(0);
        scrollPane1.setViewportView(availableItemsList);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    /**
     * Provides the ability to keep track of the items that are displayed in the list.
     */
    final class ItemModelEntry {
        final int quantity;
        final SpaceItem spaceItem;

        ItemModelEntry(SpaceItem spaceItem, int quantity) {
            this.spaceItem = spaceItem;
            this.quantity = quantity;
        }

        @Override
        public String toString() {
            return String.format("%d x %s - %s", quantity, spaceItem, spaceItem.getItemDescription());
        }
    }

}
