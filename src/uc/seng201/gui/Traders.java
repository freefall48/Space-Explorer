package uc.seng201.gui;

import uc.seng201.GameState;
import uc.seng201.destinations.traders.TradersListing;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class Traders extends JDialog {
    private JPanel contentPane;
    private JButton btnBuy;
    private JButton btnLeave;
    private JList<String> listAvailableItems;

    private GameState gameState;
    private DefaultListModel<String> availableItems;

    public Traders(GameState gameState) {
        this.gameState = gameState;
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(btnBuy);
        this.availableItems = new DefaultListModel<>();
        this.listAvailableItems.setModel(this.availableItems);

        this.listAvailableItems.addListSelectionListener(e -> onBuyMenuSelection());
        updateAvailableItemsModel();

        btnBuy.addActionListener(e -> onBuy());
        btnLeave.addActionListener(e -> onLeave());

        // call onLeave() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onLeave();
            }
        });

        // call onLeave() on ESCAPE
        contentPane.registerKeyboardAction(e -> onLeave(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void updateAvailableItemsModel() {
        availableItems.clear();
        this.gameState.getTrader().getAvailableItems().forEach(item -> {
            this.availableItems.addElement(String.format("%dx %s  - %s", item.getQuantity(), item.getItem().toString(),
                    item.getItem().getItemDescription()));
        });
    }

    private void onBuyMenuSelection() {
        if (this.listAvailableItems.getSelectedIndex() >= 0) {
            btnBuy.setEnabled(false);
            TradersListing listing = this.gameState.getTrader().getAvailableItems()
                    .get(this.listAvailableItems.getSelectedIndex());
            if (this.gameState.getSpaceShip().getSpaceBucks() >= listing.getItem().getPrice() && listing.isOneRemaining()) {
                btnBuy.setText("Buy: $" + listing.getItem().getPrice());
                btnBuy.setEnabled(true);
            }
        }
    }

    private void onBuy() {
        TradersListing listing = this.gameState.getTrader().getAvailableItems()
                .get(this.listAvailableItems.getSelectedIndex());
        if (listing.isOneRemaining()) {
            listing.removeOne();
            updateAvailableItemsModel();
            this.gameState.getSpaceShip().alterSpaceBucks(0 - listing.getItem().getPrice());
            this.gameState.getSpaceShip().add(listing.getItem());
        }
        btnBuy.setEnabled(false);
    }

    private void onLeave() {
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 20, 0);
        contentPane.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        btnLeave = new JButton();
        btnLeave.setText("Leave");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel2.add(btnLeave, gbc);
        btnBuy = new JButton();
        btnBuy.setEnabled(false);
        btnBuy.setText("Buy");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 5);
        panel2.add(btnBuy, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(20, 20, 0, 20);
        contentPane.add(panel3, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 10.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(panel4, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("Space Traders");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel4.add(label1, gbc);
        final JSeparator separator1 = new JSeparator();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 10.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel4.add(separator1, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 10.0;
        gbc.weighty = 10.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.ipadx = 10;
        gbc.ipady = 10;
        panel3.add(panel5, gbc);
        final JTabbedPane tabbedPane1 = new JTabbedPane();
        Font tabbedPane1Font = this.$$$getFont$$$(null, -1, 16, tabbedPane1.getFont());
        if (tabbedPane1Font != null) tabbedPane1.setFont(tabbedPane1Font);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 10.0;
        gbc.weighty = 10.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel5.add(tabbedPane1, gbc);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridBagLayout());
        tabbedPane1.addTab("Buy Items", panel6);
        listAvailableItems = new JList();
        Font listAvailableItemsFont = this.$$$getFont$$$(null, -1, 14, listAvailableItems.getFont());
        if (listAvailableItemsFont != null) listAvailableItems.setFont(listAvailableItemsFont);
        listAvailableItems.setSelectionMode(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 5.0;
        gbc.weighty = 10.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel6.add(listAvailableItems, gbc);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridBagLayout());
        tabbedPane1.addTab("Sell Items", panel7);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
