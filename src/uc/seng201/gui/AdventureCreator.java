package uc.seng201.gui;

import uc.seng201.SpaceShip;
import uc.seng201.crew.CrewMember;
import uc.seng201.helpers.Helpers;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;

public class AdventureCreator extends JPanel implements Screen {
    private JTextField textShipName;
    private JSlider sliderDuration;
    private JPanel panelCreator;
    private JButton btnContinue;
    private JButton btnAddCrew;
    private JList<CrewMember> listCrew;
    private JCheckBox checkboxCustomShipFile;
    private JButton btnBack;

    static DefaultListModel<CrewMember> listCrewModal = new DefaultListModel<>();

    @Override
    public JPanel getRootPanel() {
        return panelCreator;
    }

    AdventureCreator() {

        textShipName.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                super.keyTyped(e);
                if (!textShipName.getText().equals("") && textShipName.getText().matches("^([a-zA-Z0-9_]+( [a-zA-Z0-9_]+)*){1,12}$")) {
                    btnAddCrew.setEnabled(true);
                } else {
                    btnAddCrew.setEnabled(false);
                }
            }
        });

        listCrew.setModel(listCrewModal);
        listCrew.setLayoutOrientation(JList.HORIZONTAL_WRAP);

        btnBack.addActionListener(e -> SpaceExplorerGui.redraw(new MainMenu().getRootPanel()));

        btnAddCrew.addActionListener(e -> {
            JDialog createCrewMember = new CreateCrewMember();
            createCrewMember.setSize(450, 230);
            createCrewMember.setVisible(true);
        });
        btnContinue.addActionListener(e -> {
            SpaceExplorerGui.spaceShip = new SpaceShip(textShipName.getText(),
                    Helpers.calcPartsToFind(sliderDuration.getValue()));
            SpaceExplorerGui.spaceShip.add(listCrewModal.toArray());
            SpaceExplorerGui.gameDuration = sliderDuration.getValue();
            SpaceExplorerGui.planets = Helpers.generatePlanets(sliderDuration.getValue());
            SpaceExplorerGui.currentPlanet = SpaceExplorerGui.planets.get(0);
            SpaceExplorerGui.redraw(new MainScreen().getRootPanel());
        });

        checkboxCustomShipFile.addActionListener(e -> {

            if (checkboxCustomShipFile.isSelected()) {
                FileDialog fd = new FileDialog(SpaceExplorerGui.getControlFrame(), "Choose a file", FileDialog.LOAD);
                fd.setFile("*.png");
                fd.setMultipleMode(false);
                fd.setVisible(true);
                if (fd.getFile() != null) {
                    try {
                        SpaceExplorerGui.shipImage = ImageIO.read(fd.getFiles()[0]);
                        SpaceExplorerGui.shipImageLocation = fd.getDirectory() + fd.getFile();
                    } catch (IOException error) {
                        JOptionPane.showMessageDialog(SpaceExplorerGui.getControlFrame(),
                                "Failed to load the selected image!", "Error", JOptionPane.ERROR_MESSAGE);
                        checkboxCustomShipFile.setSelected(false);
                    }
                } else {
                    checkboxCustomShipFile.setSelected(false);
                }
                fd.dispose();
            }
        });

        btnContinue.addActionListener(e -> {
//            if ()
        });

        listCrewModal.addListDataListener(new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) {
                update();
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                update();
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                update();
            }

            private void update() {
                if (listCrewModal.getSize() >= 2 && !textShipName.getText().equals("")) {
                    btnContinue.setEnabled(true);
                }
                if (listCrewModal.getSize() == 4) {
                    btnAddCrew.setEnabled(false);
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelCreator = new JPanel();
        panelCreator.setLayout(new GridBagLayout());
        panelCreator.setPreferredSize(new Dimension(650, 500));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setMinimumSize(new Dimension(-1, -1));
        panel1.setPreferredSize(new Dimension(-1, -1));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 10.0;
        gbc.weighty = 4.0;
        gbc.fill = GridBagConstraints.BOTH;
        panelCreator.add(panel1, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Droid Sans Mono", -1, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Create New Adventure");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(20, 0, 10, 0);
        panel1.add(label1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel2.setAutoscrolls(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 7.0;
        gbc.fill = GridBagConstraints.BOTH;
        panelCreator.add(panel2, gbc);
        textShipName = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 100;
        panel2.add(textShipName, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Duration:");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 15, 0, 5);
        panel2.add(label2, gbc);
        sliderDuration = new JSlider();
        sliderDuration.setMajorTickSpacing(1);
        sliderDuration.setMaximum(10);
        sliderDuration.setMinimum(3);
        sliderDuration.setPaintLabels(true);
        sliderDuration.setPaintTicks(false);
        sliderDuration.setSnapToTicks(true);
        sliderDuration.setValue(5);
        sliderDuration.setValueIsAdjusting(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 150;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel2.add(sliderDuration, gbc);
        final JSeparator separator1 = new JSeparator();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.gridwidth = 5;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5, 0, 5, 0);
        panel2.add(separator1, gbc);
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$("Droid Sans Mono", -1, 20, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("Current Crew");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(10, 0, 5, 0);
        panel2.add(label3, gbc);
        checkboxCustomShipFile = new JCheckBox();
        checkboxCustomShipFile.setText("Custom Ship");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 15, 0, 0);
        panel2.add(checkboxCustomShipFile, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 0;
        gbc.weightx = 5.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 5.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer2, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Ship Name:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 5);
        panel2.add(label4, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setHorizontalScrollBarPolicy(30);
        scrollPane1.setPreferredSize(new Dimension(0, 150));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.gridwidth = 5;
        gbc.weighty = 7.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel2.add(scrollPane1, gbc);
        listCrew = new JList();
        listCrew.setAutoscrolls(true);
        listCrew.setFixedCellHeight(-1);
        listCrew.setFixedCellWidth(-1);
        Font listCrewFont = this.$$$getFont$$$("Droid Sans Mono", -1, 12, listCrew.getFont());
        if (listCrewFont != null) listCrew.setFont(listCrewFont);
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        listCrew.setModel(defaultListModel1);
        listCrew.setSelectionMode(2);
        listCrew.setVisibleRowCount(4);
        scrollPane1.setViewportView(listCrew);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panelCreator.add(panel3, gbc);
        btnAddCrew = new JButton();
        btnAddCrew.setEnabled(false);
        btnAddCrew.setText("Add Crew");
        btnAddCrew.setToolTipText("Add a crew member to our force");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 20, 0);
        panel3.add(btnAddCrew, gbc);
        btnContinue = new JButton();
        btnContinue.setEnabled(false);
        btnContinue.setText("Continue");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 20, 20);
        panel3.add(btnContinue, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 10.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer3, gbc);
        btnBack = new JButton();
        btnBack.setText("Back");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 20, 20, 0);
        panel3.add(btnBack, gbc);
        label4.setLabelFor(textShipName);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelCreator;
    }


}
